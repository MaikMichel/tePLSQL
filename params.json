{"name":"tePLSQL","tagline":"PLSQL Template engine ","body":"# tePLSQL\r\nTemplate Engine for PLSQL.\r\n\r\ntePLSQL is a template engine written completly in PL/SQL, generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates. Templates are written with embebed Dynamic PL/SQL . \r\n\r\nWith tePLSQL you should prepare the data to display in your PL/SQL packages and do business calculations, and then the template displays that already prepared data. In the template you are focusing on how to present the data, and outside the template you are focusing on what data to present.\r\n\r\nNow tePLSQL has the same syntax as the old fashion [Oracle PSP](http://docs.oracle.com/cd/E11882_01/appdev.112/e41502/adfns_psp.htm#ADFNS016) so you do not have to learn any new template language and your PSP will be supported by tePLSQL making some small modifications.\r\n\r\nTemplates are processed and a single block of PL/SQL code being executed dynamically, as does the Oracle PSP loader do.  \r\n\r\nFor a quick look see [basic example](#basic-example). The best example of use tePLSQL is [tapiGen2](https://github.com/osalvador/tapiGen2)\r\n\r\n**topics**:\r\n\r\n- [Prerequisites for developing and deploying tePLSQL templates](#prerequisites)\r\n    + [Install](#install)\r\n    + [Compatibility](#compatibility)\r\n- [Developing tePLSQL templates](#developing)\r\n    + [tePLSQL elements](#teElements)\r\n    + [Specifying tePLSQL template characteristics](#characteristics)\r\n    + [tePLSQL arguments](#arguments)\r\n    + [Naming the tePLSQL templates](#naming)\r\n    + [Including the contents of other template](#include)\r\n    + [Declaring global variables in a tePLSQL template](#declare)\r\n    + [Specifying executable statements in a tePLSQL template](#executable)\r\n    + [Substituting expression values in a tePLSQL template](#expression)\r\n    + [Escaping reserved words in a tePLSQL template](#escape)\r\n    + [Print line break to the output](#lineBreak)\r\n    + [Remove line break from the output](#noLineBreak)    \r\n- [Loading and storing tePLSQL templates into the Database](#load)\r\n- [Examples of tePLSQL templates](#examples)\r\n- [Debugging tePLSQL templates](#debug)\r\n- [tePLSQL API reference](#apiReference)\r\n- [Contributing](#contributing)\r\n- [License](#license)\r\n\r\n<a name=\"prerequisites\"></a>\r\n## Prerequisites for developing and deploying tePLSQL templates\r\nTo develop and deploy tePLSQL templates, you must meet these prerequisites:\r\n\r\n- To write a tePLSQL templates you need a text editor. No other development tool is required.\r\n- To load a tePLSQL template you need an account on the database in which to load the templates.    \r\n- To deploy tePLSQL template you must install tePLSQL package. \r\n\r\n<a name=\"install\"></a>\r\n### Install\r\nDownload and compile `TE_TEMPLATES.sql`,`TEPLSQL.pks` and `TEPLSQL.pkb`. No schema grants are necesary.\r\n\r\n<a name=\"compatibility\"></a>\r\n###Compatibility\r\ntePLSQL use regular expressions to process templates. Regular expressions were added in Oracle version 10 therefore teplsql works in Oracle Database 10g, 11g and 12c (all editions including XE).\r\n\r\n<a name=\"developing\"></a>\r\n##Developing tePLSQL templates\r\nThe order and placement of the tePLSQL directives and declarations is usually not significant. It becomes significant only when another template is included. For ease of maintenance, we recommends that you put the directives and declarations near the beginning of the template.\r\n\r\nThe next table lists the tePLSQL elements and directs you to the section that explains how to use them. \r\n\r\n<a name=\"teElements\"></a>\r\n###tePLSQL elements\r\n\r\n|Element | Name | Description | Section\r\n|--------|------|------------- | ----\r\n|`<%@ template key=value,key=value %>` | Template Directive | Characteristics of the template | [Specifying tePLSQL template characteristics](#characteristics)\r\n|`${varName}` | Arguments | The arguments are defined in a key-value associative array that receives as parameter by the render | [tePLSQL arguments](#arguments)\r\n|`<%@ include(...) %>` | Include Directive | Includes and evaluates the specified template | [Including the contents of other template](#include)\r\n|`<%! ... %>` | Declaration block | The declaration for a set of PL/SQL variables that are visible throughout the template, not just within the next BEGIN/END block. | [Declaring global variables in a tePLSQL template](#declare)\r\n|`<% ... %>` | Code block |A set of PL/SQL statements to be executed when the template is run. | [Specifying executable statements in a tePLSQL template](#executable)\r\n|`<%= ... %>` | Expression block | A single PL/SQL expression | [Substituting expression values in a tePLSQL template](#expression)\r\n|`\\\\` | Escaped character | Escaping reserved words like `<% .. %>` and `q'[]'` | [Escaping reserved words strings in a tePLSQL template](#escape)\r\n| `\\\\n` | Line Break | Print line break to the output | [Print line break to the output](#lineBreak)\r\n| `!\\n` | Remove line break | Remove line break from the output | [Remove line break from the output](#noLineBreak)\r\n\r\n\r\n<a name=\"characteristics\"></a>\r\n###Specifying tePLSQL template characteristics\r\nUse the `<%@ template ... %>` directive to specify characteristics of the template:\r\n\r\n- What is the name of the template, mandatory.\r\n- Any other user-defined feature like version, date, author...\r\n\r\nThe characteristics are a pair of key-value separated by commas. \r\n\r\nValues defined in  `<%@ template ... %>` directive can be accessed anywhere in the template  as a variable argument, preceding the name of the key with the `template`.\r\n\r\n#### Syntax\r\n\r\n`<%@ template key=value, key2=value2 %>`\r\n\r\nThe syntax is case-sensitive but space-insensitive. Values with blanks are not allowed.\r\n\r\n#### Example\r\n```\r\n<%@ template name=example_template, version=0.1 %>\r\nProcessing template ${template_name} with version ${template_version}\r\n```\r\n\r\nOutput:\r\n```\r\nProcessing template example_template with version 0.1\r\n```\r\n\r\n<a name=\"arguments\"></a>\r\n###tePLSQL arguments\r\nThe arguments variable are defined in Oracle PL/SQL associative array that receives as parameter by the render. Within the templates reference to ahce variables via `${varName}`.\r\n\r\n#### Syntax\r\n```plsql\r\nDECLARE   \r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN   \r\n   p_vars ('FullName') := 'Oscar Salvador Magallanes';\r\nEND;\r\n```\r\n\r\n#### Example\r\n```plsql\r\nDECLARE\r\n   p_template   VARCHAR2 (32000);\r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN\r\n   p_template  :='Hi ${FullName}!';\r\n   \r\n   p_vars ('FullName') := 'Oscar Salvador Magallanes';\r\n   p_template  := teplsql.render (p_vars, p_template);\r\n   DBMS_OUTPUT.put_line (p_template);\r\nEND;\r\n```\r\n\r\nOutput:\r\n```\r\nHi Oscar Salvador Magallanes\r\n```\r\n\r\n<a name=\"naming\"></a>\r\n###Naming the tePLSQL templates\r\nIn order to access and store templates correctly you must specify the template name in the `<%@ template ... %>` directive.\r\n\r\nTo specify a template name, use this directive, where tmpl is the name for the template:\r\n\r\n    <%@ template name=tmpl %>\r\n\r\nIt is the name of the template, not the name of the object that you store the template. \r\n\r\n<a name=\"include\"></a>\r\n###Including the contents of other template\r\nYou can set up an include including other tePLSQL templates in the current template. Insert this directive at the point where the content of the other template is to appear, replacing template_name with the name of the template to be included. \r\n\r\nAny variables available in the current template are also available within the included template. However, all variables and functions defined in the included template have the local scope.\r\n\r\nNested includes are allowed. tePLSQL search the template and include it in a new DECLARE BEGIN END; block, which assigned its own scope. \r\n\r\n```\r\n<%@ include(template1) %>\r\n    --template1 include template2\r\n    <%@ include(template2) %>    \r\n      --template3 include template3\r\n        <%@ include(template3) %>    \r\n```\r\n\r\nWill be interpreted as:\r\n```plsql\r\nDECLARE\r\nBEGIN\r\n--template1\r\n    DECLARE\r\n    BEGIN  \r\n    --template2  \r\n        DECLARE\r\n        BEGIN\r\n        --template3\r\n        END;    \r\n    END;\r\nEND;\r\n```\r\n\r\n#### Syntax\r\n```   \r\n   <%@ include(template_name, object_name, object_type, schema) %>\r\n```\r\n\r\n|Parameter | Description\r\n| ---------| ------------\r\n| `template_name` | The name of the template. Default NULL.\r\n| `object_name`| The name of the object (usually the name of the package). Default TE_TEMPLATES table. \r\n| `object_type`| The type of the object (PACKAGE, PROCEDURE, FUNCTION...). Default PACKAGE.\r\n| `schema`| The schema of the object. Default NULL.\r\n\r\nYou can use the include feature to pull in libraries of code into multiple templates. Alternatively, you can use this feature as a macro capability to include the same section of script code in multiple places in a template. \r\n\r\n#### Example\r\nThis example includes a footer template\r\n\r\n    <%@ include (footer) %>\r\n\r\nThis template will be search into `TE_TEMPLATES` table. \r\n\r\nThis is the same example, but the footer template is saved in package spec. \r\n\r\n    <%@ include(footer , tmpl_tab_api) %>\r\n\r\n<a name=\"declare\"></a>\r\n###Declaring global variables in a tePLSQL template\r\n\r\nYou can use the `<%! ... %>` directive to define a set of tePLSQL variables that are visible throughout the template, not just within the next BEGIN/END block. This element typically spans multiple lines, with individual PL/SQL variable declarations ended by semicolons. \r\n\r\nYou can specify multiple declaration blocks; internally, they are all merged into a single block.\r\n\r\nYou can also use explicit DECLARE blocks within the `<% ... %>` delimiters that are explained in \"Specifying executable statements in a tePLSQL template\". These declarations are only visible to the BEGIN/END block that follows them.\r\n\r\nTo make things easier to maintain, keep all your directives and declarations near the beginning of a PL/SQL server template.\r\n\r\n#### Syntax\r\n```plsql\r\n<%! PL/SQL declaration;\r\n    [ PL/SQL declaration; ] ... %>\r\n```\r\n\r\nThe usual PL/SQL syntax is allowed within the block. The delimiters server as shorthand, enabling you to omit the DECLARE keyword. All declarations are available to the code later in the template.\r\n\r\n#### Example\r\n```plsql\r\n<%!\r\n  CURSOR emp_cursor IS\r\n  SELECT last_name, first_name\r\n  FROM hr.employees\r\n  ORDER BY last_name;\r\n%>\r\n```\r\n\r\n<a name=\"executable\"></a>\r\n###Specifying executable statements in a tePLSQL template\r\nYou can use the `<% ... %>` code block directive to run a set of PL/SQL statements when the template is run. \r\n\r\nThis element typically spans multiple lines, with individual PL/SQL statements ended by semicolons. The statements can include complete blocks. \r\n\r\nThe statements can also be the bracketing parts of IF/THEN/ELSE or BEGIN/END blocks. When a code block is split into multiple directives, you can put output text or other directives in the middle, and the middle pieces are conditionally executed when the template is run. The example provides an illustration of this technique.\r\n\r\nAll the usual PL/SQL syntax is allowed within the block.\r\n\r\n#### Syntax\r\n```plsql\r\n<% PL/SQL statement;\r\n   [ PL/SQL statement; ] ... %>\r\n```\r\n\r\n#### Example\r\n```plsql\r\n  <%! v_color VARCHAR2(20); %>\r\n  <% FOR ITEM IN (SELECT product_name, list_price, catalog_url \r\n                  FROM product_information\r\n                  WHERE list_price IS NOT NULL\r\n                  ORDER BY list_price DESC) LOOP\r\n     IF item.list_price > p_minprice THEN\r\n        v_color := '#CCCCFF';\r\n     ELSE\r\n        v_color := '#CCCCCC';\r\n     END IF;\r\n  %>\r\n  <TR BGCOLOR=\"<%= v_color %>\">\r\n    <TD><A HREF=\"<%= item.catalog_url %>\"><%= item.product_name %></A></TD>\r\n    <TD><BIG><%= item.list_price %></BIG></TD>\r\n  </TR>\r\n  <% END LOOP; %>\r\n```\r\n\r\n<a name=\"expression\"></a>\r\n###Substituting expression values in a tePLSQL template\r\nAn expression directive outputs a single PL/SQL expression, such as a string, arithmetic expression, function call, or combination of these things. The result is substituted as a string at that spot in the output that is produced by the template. The expression result must be a string value or be able to be cast to a string. For any types that cannot be implicitly cast, such as DATE, pass the value to the PL/SQL `TO_CHAR` function.\r\n\r\n#### Syntax\r\nThe syntax of an expression directive is as follows, where the expression placeholder is replaced by the desired expression:\r\n\r\n`<%= expression %>`\r\n\r\nYou need not end the PL/SQL expression with a semicolon.\r\n\r\n#### Example\r\nThis example includes a directive to print the value of a variable in a row of a cursor:\r\n\r\n`<%= emp_record.last_name %>`\r\n\r\nThe content within the `<%= ... %>` delimiters is processed by the `tePLSQL.P` procedure, which trims leading or trailing white space and requires that you enclose literal strings in single quotation marks.\r\n\r\nYou can use concatenation by using the twin pipe symbol (||) as in PL/SQL. This directive shows an example of concatenation:\r\n\r\n`<%= 'The employee last name is ' || emp_record.last_name %>`\r\n\r\n\r\n<a name=\"escape\"></a>\r\n###Escaping reserved words in a tePLSQL template\r\ntePLSQL has three reserved words: \r\n\r\n  - `q'[]'`\r\n  - `<%`\r\n  - `%>`\r\n  - `\\\\n`\r\n\r\ntePLSQLP use `q'[]'` alternative quoting mechanism to print template text into buffer, and `<% %>` to define directives. \r\n\r\nIf you want to escape this reserved words you must use `\\\\`.\r\n\r\n#### Syntax\r\n\r\n`\\\\reserved_word`  \r\n\r\n#### Example\r\n```\r\nScaping reserved words:\r\n- q\\\\'[]\\\\'\r\n- <\\\\%\r\n- %\\\\>\r\n- \\\\\\\\n\r\n```\r\n\r\nOutput:\r\n```\r\nScaping reserved words:\r\n- q'[]'\r\n- <%\r\n- %>\r\n- \\\\n\r\n```\r\n\r\n<a name=\"lineBreak\"></a>\r\n###Print line break to the output\r\nThe control of the white-space in a template is a problem that to some extent haunts every template engine in the business.\r\n\r\ntePLSQL use white-space stripping. It automatically ignores (i.e. does not print to the output) superfluous white-spaces. The indentation white-space, and trailing white-space at the end of the line (includes the line break) will be ignored in lines that contains only tePLSQL tags (e.g. `<%if ... %>`, `<%! ... %>`), apart from the ignored white-space itself. \r\n\r\nIf you want to force insert a line break you can use `\\\\n`\r\n\r\n#### Syntax\r\n\r\n`\\\\n`  \r\n\r\n#### Example\r\nWithout `\\\\n` \r\n```\r\n<% for i in 1 .. 10 loop %>\r\nValue: <%=i%>\r\n<%end loop;%>\r\n```\r\n\r\n```\r\nValue: 1Value: 2Value: 3Value: 4Value: 5Value: 6Value: 7Value: 8Value: 9Value: 10\r\n```\r\n\r\nWith `\\\\n`\r\n```\r\n<% for i in 1 .. 10 loop %>\r\nValue: <%=i%>\\\\n\r\n<%end loop;%>\r\n```\r\n\r\n```\r\nValue: 1\r\nValue: 2\r\nValue: 3\r\nValue: 4\r\nValue: 5\r\nValue: 6\r\nValue: 7\r\nValue: 8\r\nValue: 9\r\nValue: 10\r\n```\r\n\r\n<a name=\"noLineBreak\"></a>\r\n###Remove line break from the output\r\nBy the same way you can indicate in the template that a line break is not printed on the output. \r\n\r\n#### Syntax\r\n\r\n`!\\n`  \r\n\r\n#### Example\r\nWithout `!\\n` \r\n```\r\nValues:\r\n<% for i in 1 .. 10 loop %>\r\n<%=i%>,\r\n<%end loop;%>\r\n```\r\n\r\n```\r\nValues:\r\n1,\r\n2,\r\n3,\r\n4,\r\n5,\r\n6,\r\n7,\r\n8,\r\n9,\r\n10,\r\n```\r\n\r\nWith `!\\n`\r\n```\r\nValues:!\\n\r\n<% for i in 1 .. 10 loop %>\r\n<%=i%>,!\\n\r\n<%end loop;%>\r\n```\r\n\r\n```\r\nValues:1,2,3,4,5,6,7,8,9,10,\r\n```\r\n\r\n<a name=\"load\"></a>\r\n##Loading and storing tePLSQL templates into the Database\r\nYou can store tePLSQL templates in the database in two ways: In the relational table `TE_TEMPLATES` or in any Oracle Object.\r\n\r\n###TE_TEMPLATES table\r\n`TE_TEMPLATES` table Is the default way of storing a tePLSQL templates. The table has a `TEMPLATE` column defined as CLOB where the template is loaded. \r\n\r\n#### Syntax\r\n\r\n```\r\nTABLE TE_TEMPLATES\r\n Name                                      Null?    Type                        \r\n ----------------------------------------- -------- ----------------------------\r\n NAME                                      NOT NULL VARCHAR2(300)               \r\n TEMPLATE                                           CLOB                        \r\n DESCRIPTION                                        VARCHAR2(300)               \r\n CREATED_BY                                NOT NULL VARCHAR2(100)               \r\n CREATED_DATE                              NOT NULL DATE                        \r\n MODIFIED_BY                               NOT NULL VARCHAR2(100)               \r\n MODIFIED_DATE                             NOT NULL DATE \r\n```\r\n\r\n#### Example\r\nInsert template named *adding* into `TE_TEMPLATES` table\r\n```plsql\r\nINSERT INTO te_templates (name\r\n                        , template)\r\n  VALUES   ('ADDING'\r\n          , '<%@ template \r\n    name=adding,\r\n    version=0.1 %>\r\n<%! x pls_integer := 1 + 1; %>\r\nProcessing template ${template_name} with version ${template_version}\r\nThe variable x has the value: <%= x %>');\r\n\r\nCOMMIT;\r\n```\r\n\r\nProcessing the template: \r\n```plsql\r\nSET SERVEROUTPUT on;\r\nBEGIN\r\n   DBMS_OUTPUT.put_line (teplsql.process (p_template_name => 'adding'));\r\nEND;\r\n```\r\n\r\nOutput\r\n```\r\nProcessing template adding with version 0.1\r\nThe variable x has the value: 2\r\n```\r\n\r\n###Oracle Objects\r\n\r\ntePLSQL templates can be stored inside PL/SQL program unit spec or bodies.\r\n\r\nIn order to place a template into a program unit you have to create a non-compiled section in the latter with the aid of PL/SQL conditional compilation directives:\r\n\r\n####Syntax\r\n```\r\n$if false $then\r\n... template ...\r\n$end\r\n```\r\n\r\nThe syntax is case-sensitive but space-insensitive. Line breaks are not allowed. \r\n\r\n####Example\r\n\r\n```plsql\r\nCREATE OR REPLACE PACKAGE test_tmpl\r\nAS\r\n$if false $then\r\n<%! x pls_integer := 1 + 1; %>\r\nThe variable x has the value: <%= x %>\r\n$end\r\nEND test_tmpl;\r\n```\r\n\r\nProcess the template:\r\n\r\n```plsql\r\nSET SERVEROUTPUT on;\r\nBEGIN\r\n   DBMS_OUTPUT.put_line (teplsql.process (p_object_name => 'test_tmpl'));\r\nEND;\r\n```\r\n\r\nOutout:\r\n```\r\nThe variable x has the value: 2\r\n```\r\n\r\n####Anonymous  templates\r\nAn anonymous template must be the only template in its host object. The template resides in a non-compiled section and occupies it entirely. An example of an anonymous template placed in the `test_tmpl` package specification:\r\n\r\n```plsql\r\nCREATE OR REPLACE PACKAGE test_tmpl\r\nAS\r\n$if false $then\r\n<%! x pls_integer := 1 + 1; %>\r\nThe variable x has the value: <%= x %>\r\n$end\r\nEND test_tmpl;\r\n```\r\n\r\ntePLSQL seeks anonymous templates in objects greedily, so the following template contains two anonymous templates that tePLSQL merge and execute together.\r\n\r\n```plsql\r\ncreate or replace package test_tmpl2 as\r\n$if false $then\r\n<%! x pls_integer := 1 + 1;%>\r\nValue X: <%= x %>\r\n$end\r\n\r\n$if false $then\r\n<%! y pls_integer := 2 + 3; %>\r\nValue Y: <%= y %>\r\n$end\r\nend test_tmpl2;\r\n/\r\n```\r\n\r\ntePLSQL interpret it as:\r\n```plsql\r\n<%! x pls_integer := 1 + 1;%>\r\nValue X: <%= x %>\r\n<%! y pls_integer := 2 + 3; %>\r\nValue Y: <%= y %>\r\n```\r\n\r\nProcess the template:\r\n```plsql\r\nSET SERVEROUTPUT on;\r\nBEGIN\r\n   DBMS_OUTPUT.put_line (teplsql.process (p_object_name => 'test_tmpl2'));\r\nEND;\r\n```\r\n\r\nOutput:\r\n```\r\nValue X: 2Value Y: 5 \r\n```\r\n\r\n####Named\r\nIn order to store several templates in a single object correctly you must\r\nspecify template characteristics, giving the name of the template.\r\n\r\nDefining the template name\r\n\r\n```plsql\r\nCREATE OR REPLACE PACKAGE test_tmpl\r\nAS\r\n\r\n$if false $then\r\n<%@ template \r\n    name=adding,\r\n    version=0.1 %>\r\n<%! x pls_integer := 1 + 1; %>\r\nProcessing template ${template_name} with version ${template_version}\r\nThe variable x has the value: <%= x %>\r\n$end\r\n\r\n$if false $then\r\n<%@ template name=subtracting, version=0.1, revision=3 %>\r\n<%! y pls_integer := 1 - 1; %>\r\nProcessing template ${template_name} with version ${template_version} and revision ${template_revision}\r\nThe variable y has the value: <%= y %>\r\n$end\r\n\r\nEND test_tmpl;\r\n```\r\n\r\nProcess the \"subtracting\" template:\r\n\r\n```plsql\r\nSET SERVEROUTPUT on;\r\nBEGIN\r\n   DBMS_OUTPUT.put_line (teplsql.process (p_template_name => 'subtracting', p_object_name => 'test_tmpl'));\r\nEND;\r\n```\r\n\r\nOutput:\r\n\r\n    Processing template subtracting with version 0.1 and revision 3\r\n    The variable y has the value: 0\r\n\r\n<a name=\"examples\"></a>\r\n##Examples of tePLSQL templates\r\n\r\n### Basic Example\r\n\r\n```plsql\r\nDECLARE\r\n   p_template   VARCHAR2 (32000);\r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN\r\n   p_template  :=\r\n      q'[<%/* Using variables */%>\r\n       Hi ${FullName}!\r\n\r\n       <%/* Using expressions */%>\r\n       Today <%= TO_CHAR(SYSDATE, 'DD-MM-YYYY') %> is a great day!\r\n              \r\n       <% --Using external variable in the query loop\r\n          for c1 in (select username, user_id from all_users where username = upper('${username}')) loop %>          \r\n       Username: <%= c1.username %>, ID:<%= c1.user_id %>.\r\n       <% end loop; %>       \r\n       \r\n       <%/* Escaping chars */%>       \r\n       This is the tePLSQL code block syntax <\\\\% ... %\\\\>\r\n              \r\n       <%/* Regards */%>\r\n       Bye <%=UPPER('${username}')%>.]';\r\n\r\n   --Key-value variables.\r\n   p_vars ('FullName') := 'Oscar Salvador Magallanes';\r\n   p_vars ('username') := 'test';\r\n\r\n   p_template  := teplsql.render (p_vars, p_template);\r\n\r\n   DBMS_OUTPUT.put_line (p_template);\r\nEND;\r\n```\r\n\r\nOutput:\r\n```\r\n    Hi Oscar Salvador Magallanes!\r\n    \r\n    Today 08-09-2015 is a great day!\r\n    \r\n    Username: SYS\r\n    \r\n    This is the tePLSQL code block syntax <% ... %>\r\n    \r\n    Bye SYS.\r\n\r\n    PL/SQL procedure successfully completed.\r\n    Elapsed: 00:00:00.02\r\n```\r\n\r\n### HTML Example\r\n```plsql\r\nDECLARE\r\n   p_template   CLOB;\r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN\r\n   p_template  :=\r\n      q'[<!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>${title}</title>\r\n      </head>\r\n      <body>\r\n        <h1> Print Sequence numbers </h1>\r\n        <br>\r\n        <%for i in ${initValue} .. ${lastValue} loop %>\r\n        <%= i %><br>\r\n        <% end loop;%>\r\n        <h1> Print the Odd numbers of sequence </h1>\r\n        <br>    \r\n        <% /*You can insert PLSQL comments as always*/ \r\n        for i in ${initValue} .. ${lastValue}\r\n        loop \r\n            if mod(i,2) <> 0 \r\n            then %>\r\n        <%= i %><br>\r\n        <% end if; \r\n        end loop; %>\r\n      </body>\r\n    </html>]';\r\n\r\n   --Key-value variables.\r\n   p_vars ('title') := 'Number sequence';\r\n   p_vars ('initValue') := 5;\r\n   p_vars ('lastValue') := 20;\r\n\r\n   p_template  := teplsql.render (p_vars, p_template);\r\n\r\n   DBMS_OUTPUT.put_line (p_template);\r\nEND;\r\n```\r\n\r\nOutput: \r\n```html\r\n<!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>Number sequence</title>\r\n      </head>\r\n      <body>\r\n        <h1> Print Sequence numbers </h1>\r\n        <br>\r\n        5<br>\r\n        6<br>\r\n        7<br>\r\n        8<br>\r\n        9<br>\r\n        10<br>\r\n        11<br>\r\n        12<br>\r\n        13<br>\r\n        14<br>\r\n        15<br>\r\n        16<br>\r\n        17<br>\r\n        18<br>\r\n        19<br>\r\n        20<br>\r\n        <h1> Print the Odd numbers of sequence </h1>\r\n        <br>    \r\n        5<br>\r\n        7<br>\r\n        9<br>\r\n        11<br>\r\n        13<br>\r\n        15<br>\r\n        17<br>\r\n        19<br>\r\n      </body>\r\n    </html>\r\n    PL/SQL procedure successfully completed.\r\n    Elapsed: 00:00:00.02\r\n```\r\n\r\n### Excel example\r\nGenerating formatted Excel file. Save the result as .xml file and open it with MS Excel.\r\n\r\n```plsql\r\nset timing on;\r\nset serveroutput on;\r\n\r\nDECLARE\r\n   p_template   CLOB;\r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN\r\n   p_template  :=\r\n      q'[<?xml version=\"1.0\"?>\r\n<?mso-application progid=\"Excel.Sheet\"?>\r\n<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"\r\n ...\r\n   <% for i in 1 .. 26 loop%>\r\n   <Row ss:AutoFitHeight=\"0\">\r\n    <Cell ss:Index=\"2\" ss:StyleID=\"s65\"><Data ss:Type=\"Number\"><%=i%></Data></Cell>\r\n    <Cell ss:StyleID=\"s66\"><Data ss:Type=\"String\"><%=CHR (i + 64)%></Data></Cell>\r\n    <Cell ss:StyleID=\"s66\"><Data ss:Type=\"Number\"><%=i%></Data></Cell>\r\n    <Cell ss:StyleID=\"s66\"><Data ss:Type=\"Number\"><%=i+10%></Data></Cell>\r\n    <Cell ss:StyleID=\"s67\"><Data ss:Type=\"Number\"><%=i+20%></Data></Cell>\r\n   </Row> \r\n   <% end loop; %>\r\n ...\r\n</Workbook>]';\r\n\r\n   p_template  := teplsql.render (p_vars, p_template);\r\n\r\n   DBMS_OUTPUT.put_line (p_template);\r\nEND;\r\n```\r\n\r\nOutput:\r\n\r\n![Excel screenshot](ExcelScreenShot.png)\r\n\r\n#### Declaration and instructions\r\n\r\n```plsql\r\nDECLARE\r\n   p_template   CLOB;\r\n   p_vars       teplsql.t_assoc_array;\r\nBEGIN\r\n   p_template  := \r\n   q'[<%! lang_name VARCHAR2(10) := 'PL/SQL';\r\n       l_random_number pls_integer := ROUND(DBMS_RANDOM.VALUE (1, 9));\r\n      %> \r\n        The 'sequence' is used in scripting language: <%=lang_name %>.            \r\n        The result of the operation ${someInValue} * <%= l_random_number %> is <%= ${someInValue} * l_random_number %>\r\n    ]';\r\n\r\n   --Key-value variables.   \r\n   p_vars ('someInValue') := 5;   \r\n\r\n   p_template  := teplsql.render (p_vars, p_template);\r\n\r\n   DBMS_OUTPUT.put_line (p_template);\r\nEND;\r\n```\r\n\r\nOutput:\r\n\r\n        The 'sequence' is used in scripting language: PL/SQL.\r\n        The result of the operation 5 * 7 is 35\r\n\r\n<a name=\"debug\"></a>\r\n##Debugging tePLSQL templates\r\nAs you begin experimenting with tePLSQL templates, and as you adapt your first simple templates into more elaborate ones, keep these guidelines in mind when you encounter problems. \r\n\r\n###Find where the template fails\r\ntePLSQL interprets the template and converts it into executable PL/SQL code. When error is occurred you will see the description in the `DBMS_OUTPUT`:\r\n\r\nRendering this template: \r\n```\r\nTesting Error. \r\n<%/* Raising error \"divisor is equal to zero\" */%>\r\nRaising an error <%= 10/0 %>.\r\n```\r\n\r\nYou will get this error:\r\n```\r\nTesting Error. \r\nRaising an error ### tePLSQL Render Error ###\r\nORA-01476: divisor is equal to zero ORA-06512: at line 2\r\nORA-06512: at \"USER.TEPLSQL\", line 666\r\n\r\n### Processed template ###\r\nDECLARE  BEGIN tePLSQL.p(q'[Testing Error. \r\n]'); /* Raising error \"divisor is equal to zero\" */ tePLSQL.p(q'[Raising an error ]');tePLSQL.p( 10/0 );tePLSQL.p(q'[. ]'); END;\r\n```\r\n\r\n`### Processed template ###` is the template converted into executable PL/SQL.\r\n\r\nYou can see `ORA-01476: divisor is equal to zero ORA-06512: at line 2` means that in the second line of the `### Processed template ###` code you have the error. \r\n\r\nThe exception message will be append into the tePLSQL buffer. This helps you to find where the exception is occurred. tePLSQL trunc the buffer at maximum 500 characters to prevent the exception message is truncated in long templates.\r\n\r\n####Syntax error\r\nRendering this template:\r\n```\r\nTesting syntax Error. \r\n<%/* Raising syntax error */%>\r\nRaising an error <%= 10/1; %>.\r\n```\r\n\r\nYou will get this error:\r\n```\r\n### tePLSQL Render Error ###\r\nORA-06550: line 2, column 82:\r\nPLS-00103: Encountered the symbol \";\" when expecting one of the following:\r\n\r\n   ) , * & = - + < / > at in is mod remainder not rem =>\r\n   <an exponent (**)> <> or != or ~= >= <= <> and or like like2\r\n   like4 likec as between from using || member submultiset\r\nThe symbol \";\" was ignored. ORA-06512: at \"DBAX.TEPLSQL\", line 666\r\n\r\n### Processed template ###\r\nDECLARE  BEGIN tePLSQL.p(q'[Testing syntax Error. \r\n]'); /* Raising syntax error */ tePLSQL.p(q'[Raising an error ]');tePLSQL.p( 10/1; );tePLSQL.p(q'[. ]'); END;\r\n```\r\n\r\nYou will see at line 2 column 82, this instruction `tePLSQL.p( 10/1; )` that is not valid in PL/SQL. \r\n\r\n<a name=\"apiReference\"></a>\r\n##tePLSQL API reference\r\n\r\n### RENDER\r\n\r\nRenders the template received as parameter. \r\n\r\n#### Syntax\r\n\r\n```plsql\r\nFUNCTION render (p_vars IN t_assoc_array DEFAULT null_assoc_array,p_template IN CLOB)\r\n  RETURN CLOB;\r\n```\r\n\r\n#### Parameters\r\n\r\n|Parameter | Description\r\n|----------|------------\r\n|p_vars | The template's arguments.\r\n|p_template | The template's body.\r\n| return CLOB | The processed template.\r\n\r\n### PROCESS\r\n\r\nRceives the name of the object, usually a package, which contains an embedded template. The template is extracted and is rendered with `render` function \r\n\r\n#### Syntax\r\n\r\n```plsql\r\nFUNCTION process (p_vars            IN t_assoc_array DEFAULT null_assoc_array\r\n                , p_template_name   IN VARCHAR2 DEFAULT NULL\r\n                , p_object_name     IN VARCHAR2 DEFAULT 'TE_TEMPLATES'                                      \r\n                , p_object_type     IN VARCHAR2 DEFAULT 'PACKAGE'\r\n                , p_schema          IN VARCHAR2 DEFAULT NULL )\r\n```\r\n\r\n#### Parameters\r\n\r\n|Parameter | Description\r\n|----------|------------\r\n|p_vars | The template's arguments.\r\n|p_template_name | The name of the template.\r\n|p_object_name | The name of the object (usually the name of the package).\r\n|p_object_type | The type of the object (PACKAGE, PROCEDURE, FUNCTION...).\r\n|p_schema | The object's schema name.\r\n| return CLOB | The processed template.\r\n\r\n### PRINT\r\n\r\nPrints received data into the buffer\r\n\r\n#### Syntax\r\n\r\n```plsql\r\nPROCEDURE PRINT (p_data IN CLOB);\r\n\r\nPROCEDURE p (p_data IN CLOB);\r\n\r\nPROCEDURE PRINT (p_data IN VARCHAR2);\r\n\r\nPROCEDURE p (p_data IN VARCHAR2);\r\n\r\nPROCEDURE PRINT (p_data IN NUMBER);\r\n\r\nPROCEDURE p (p_data IN NUMBER);\r\n```\r\n\r\n#### Parameters\r\n\r\n|Parameter | Description\r\n|----------|------------\r\n|p_data | The data to print into buffer\r\n\r\n\r\n### OUTPUT_CLOB\r\n\r\nOutput CLOB data to the DBMS_OUTPUT.PUT_LINE\r\n\r\n#### Syntax\r\n\r\n```plsql\r\nPROCEDURE output_clob(p_clob in CLOB);\r\n```\r\n\r\n#### Parameters\r\n\r\n|Parameter | Description\r\n|----------|------------\r\n|p_clob | The CLOB to print to the DBMS_OUTPUT\r\n\r\n\r\n<a name=\"contributing\"></a>\r\n## Contributing\r\n\r\nIf you have ideas, get in touch directly.\r\n\r\nPlease inser at the bottom of your commit message the following line using your name and e-mail address .\r\n\r\n    Signed-off-by: Your Name <you@example.org>\r\n\r\nThis can be automatically added to pull requests by committing with:\r\n\r\n    git commit --signoff\r\n\r\n<a name=\"license\"></a>\r\n## License\r\nCopyright 2015 Oscar Salvador Magallanes \r\n\r\ntePLSQL is under MIT license. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}